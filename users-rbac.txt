All Kubernetes clusters have two categories of users: service accounts managed by Kubernetes, and normal users.  Normal users cannot be added to a cluster through an API call. 
Even though a normal user cannot be added via an API call, any user that presents a valid certificate signed by the cluster's certificate authority (CA) is considered authenticated. In this configuration, Kubernetes determines the username from the common name field in the 'subject' of the cert (e.g., "/CN=bob"). From there, the role based access control (RBAC) sub-system would determine whether the user is authorized to perform a specific operation on a resource. 
In contrast, service accounts are users managed by the Kubernetes API. They are bound to specific namespaces, and created automatically by the API server or manually through API calls. Service accounts are tied to a set of credentials stored as Secrets, which are mounted into pods allowing in-cluster processes to talk to the Kubernetes API.
Kubernetes uses client certificates, bearer tokens, or an authenticating proxy to authenticate API requests through authentication plugins


Generate certificates for the user.
Following command will generates an Ed25519 private key using OpenSSL.
	$ openssl genpkey -out john.key -algorithm Ed25519
After executing this command, OpenSSL will generate an Ed25519(which is a modern elliptic curve cryptography algorithm) private key and save it in the “john.key” file. Keep in mind that it’s crucial to protect this private key since it grants access to sensitive information or operations.
Now generate a certificate signing request for user john:
	$ openssl req -new -key john.key -out john.cr -subj “/CN=john”

Create a certificate signing request (CSR).
For request we have to obtain the base64-encoded representation of the contents of the “john.csr” file without newline characters. This encoding is often useful for transmitting or storing binary data in a text-based format.
	$ cat john.csr | base64 | tr -d "\n"
copy the output from previous command & replace in .spec.request , the following is a CSR template from k8s documentation,
	
$ cat <<EOF | kubectl apply -f -
apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: john
spec:
   request: 
    signerName: kubernetes.io/kube-apiserver-client
    expirationSeconds: 86400  # one day
   usages:
    - client auth
 EOF
Sign the certificate using the cluster certificate authority.
By executing following command, you authorize the issuance of a certificate associated with the CSR, allowing the user to use the certificate for authentication and access within the Kubernetes cluster.
$kubectl certificate approve john
certificatesigningrequest.certificates.k8s.io/john approved
Check john’s CSR status,
	$ kubectl describe csr/john
Create a configuration specific to the user.
$kubectl get csr/john -o jsonpath="{.status.certificate}" | base64 -d > john.crt
$cp ~/.kube/config john-kube-config   #always backup
$kubectl config get-clusters
  	NAME
             default
Now we extracts the certificate from a CertificateSigningRequest (CSR) named “john” using kubectl and jsonpath. The certificate is base64-decoded and saved in a file named "john.crt". Keep in mind that we only have one cluster in this case named default .
$kubectl --kubeconfig john-kube-config config set-credentials john --client-key john.key --client-certificate john.csr --embed-certs=true
                                  User "john" set.
To set credentials for a user named “john” using a Kubernetes configuration file named “john-kube-config”. It specifies the client key, client certificate, and enables embedding of the certificates.
$kubectl --kubeconfig john-kube-config config set-context john --cluster default --user john
            Context "john" created.

To set a context named “john” in a Kubernetes configuration file named “john-kube-config”. It specifies the cluster default and user john to be associated with this context.

Add RBAC rules for the user or their group.
Create a Role for John to manage pods in the default namespace:
$ kubectl create role pod-manager --verb=create,list,get --resource=pods  --namespace = default
Bind the Role with a ClusterRoleBinding:
$ kubectl create clusterrolebinding john-pod-manager — clusterrole=pod-manager — user=john

Verify authorization using kubectl auth can-i:
kubectl auth can-i create deployments --namespace=default --as=john
no 

kubectl auth can-i create secrets --namespace=default --as=john
no

kubectl auth can-i get pods --namespace=default --as=john
yes
